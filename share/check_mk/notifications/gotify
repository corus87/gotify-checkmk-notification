#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Gotify notification based on https://exchange.checkmk.com/p/telegram-notifications.
# SPDX-License-Identifier: GPL-2.0-only

from __future__ import unicode_literals

import sys
import requests
import urllib.parse
from cmk.notification_plugins import utils


tmpl_host_text = """$HOSTSTATE_EMOJI$ `$HOSTNAME$`
```
Host:     $HOSTNAME$
Event:    $EVENT_TXT$
Output:   $HOSTOUTPUT$
```"""

tmpl_service_text = """$SERVICESTATE_EMOJI$ `$HOSTNAME$/$SERVICEDESC$`
```
Host:     $HOSTNAME$
Service:  $SERVICEDESC$
Event:    $EVENT_TXT$
Output:   $SERVICEOUTPUT$
```"""


def hoststate_as_emoji(hoststate):
    if hoststate == "UP":
        return "\ud83d\udd35"  # large blue circle
    elif hoststate == "DOWN":
        return "\ud83d\udd34"  # large red circle
    elif hoststate == "UNREACH":
        return "\u26aa\ufe0f"  # medium white circle
    return hoststate


def servicestate_as_emoji(servicestate):
    if servicestate == "OK":
        return "\ud83c\udd97"  # squared ok
    elif servicestate == "WARN":
        return "\u26a0\ufe0f"  # warning sign
    elif servicestate == "CRIT":
        return "\u2757\ufe0f"  # heavy exclamation mark symbol
    elif servicestate == "UNKN":
        return "\u2754"  # white question mark ornament
    return servicestate

def construct_message_text(context):
    context["HOSTSTATE_EMOJI"] = hoststate_as_emoji(context.get("HOSTSHORTSTATE", ""))
    context["SERVICESTATE_EMOJI"] = servicestate_as_emoji(
        context.get("SERVICESHORTSTATE", "")
    )

    notification_type = context["NOTIFICATIONTYPE"]
    if notification_type in ["PROBLEM", "RECOVERY"]:
        txt_info = "$PREVIOUS@HARDSHORTSTATE$ -> $@SHORTSTATE$"
    elif notification_type.startswith("FLAP"):
        if "START" in notification_type:
            txt_info = "Started Flapping"
        else:
            txt_info = "Stopped Flapping ($@SHORTSTATE$)"
    elif notification_type.startswith("DOWNTIME"):
        what = notification_type[8:].title()
        txt_info = "Downtime " + what + " ($@SHORTSTATE$)"
    elif notification_type == "ACKNOWLEDGEMENT":
        txt_info = "Acknowledged ($@SHORTSTATE$)"
    elif notification_type == "CUSTOM":
        txt_info = "Custom Notification ($@SHORTSTATE$)"
    else:
        txt_info = notification_type  # Should never happen

    context["EVENT_TXT"] = utils.substitute_context(
        txt_info.replace("@", context["WHAT"]), context
    )

    if context["WHAT"] == "HOST":
        tmpl_text = tmpl_host_text
    else:
        tmpl_text = tmpl_service_text

    return utils.substitute_context(tmpl_text, context)

def send_gotify_message(url, token, text, prio, title):

    url = urllib.parse.urljoin(url, "message?token=" + token)

    json = {"message": text,
            "priority": int(prio),
            "title": title}

    r = requests.post(url=url, json=json)

    if r.status_code != 200:
        sys.stderr.write(
            "Failed to send Gotify message. Status: {}, Response: {}\n".format(
                r.status_code, r.text
            )
        )
        return 1  # Temporary error to make Checkmk retry

    sys.stdout.write(
            "Sent message to Gotify: {}\n".format(text)
    )
    return 0


def main():
    context = utils.collect_context()
    url = context["PARAMETER_URL"]
    token = context["PARAMETER_TOKEN"]
    prio = context["PARAMETER_PRIORITY"]
    title = context["PARAMETER_GOTIFY_TITLE"]
    text = construct_message_text(context)
    return send_gotify_message(url, token, text, prio, title)


if __name__ == "__main__":
    sys.exit(main())
